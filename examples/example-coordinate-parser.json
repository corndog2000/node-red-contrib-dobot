[
    {
        "id": "cp1234567.890abc",
        "type": "tab",
        "label": "Coordinate Parser Example",
        "disabled": false,
        "info": "Example showing coordinate parsing similar to Python UI"
    },
    {
        "id": "cp1",
        "type": "ui_text_input",
        "z": "cp1234567.890abc",
        "name": "",
        "label": "Paste Coordinates",
        "tooltip": "Format: x, y, z, r or (x, y, z, r) or [x, y, z, r]",
        "group": "cp_group_1",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 130,
        "y": 80,
        "wires": [["cp2"]]
    },
    {
        "id": "cp2",
        "type": "function",
        "z": "cp1234567.890abc",
        "name": "Parse Coordinates",
        "func": "// Parse coordinates from various formats\n// Matches the Python UI parse_coordinates function\n\ntry {\n    let coordText = msg.payload.trim();\n    \n    // Remove brackets if present\n    coordText = coordText.replace(/^[\\[\\(]/, '').replace(/[\\]\\)]$/, '');\n    \n    // Split by comma and parse floats\n    const coords = coordText.split(',').map(x => parseFloat(x.trim()));\n    \n    // Validate we have exactly 4 values\n    if (coords.length !== 4) {\n        node.error(\"Please provide exactly 4 values (X, Y, Z, R)\");\n        msg.error = \"Invalid number of coordinates\";\n        return [null, msg];\n    }\n    \n    // Check for NaN values\n    if (coords.some(isNaN)) {\n        node.error(\"Invalid coordinate format. Please use numbers.\");\n        msg.error = \"Invalid coordinate values\";\n        return [null, msg];\n    }\n    \n    // Success - format the output\n    msg.payload = {\n        x: coords[0],\n        y: coords[1],\n        z: coords[2],\n        r: coords[3]\n    };\n    \n    msg.parsed = `X: ${coords[0]}, Y: ${coords[1]}, Z: ${coords[2]}, R: ${coords[3]}`;\n    \n    return [msg, null];\n    \n} catch (err) {\n    node.error(\"Error parsing coordinates: \" + err.message);\n    msg.error = err.message;\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [["cp3", "cp4"], ["cp5"]]
    },
    {
        "id": "cp3",
        "type": "ui_text",
        "z": "cp1234567.890abc",
        "group": "cp_group_1",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Parsed Result",
        "format": "{{msg.parsed}}",
        "layout": "col-center",
        "x": 580,
        "y": 60,
        "wires": []
    },
    {
        "id": "cp4",
        "type": "change",
        "z": "cp1234567.890abc",
        "name": "Store Coordinates",
        "rules": [
            {"t": "set", "p": "coordinates", "pt": "flow", "to": "payload", "tot": "msg"}
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 100,
        "wires": [[]]
    },
    {
        "id": "cp5",
        "type": "ui_toast",
        "z": "cp1234567.890abc",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 570,
        "y": 140,
        "wires": []
    },
    {
        "id": "cp6",
        "type": "inject",
        "z": "cp1234567.890abc",
        "name": "Example 1",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "250, 0, 200, 0",
        "payloadType": "str",
        "x": 110,
        "y": 180,
        "wires": [["cp2"]]
    },
    {
        "id": "cp7",
        "type": "inject",
        "z": "cp1234567.890abc",
        "name": "Example 2",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "(300, 50, 150, 45)",
        "payloadType": "str",
        "x": 110,
        "y": 220,
        "wires": [["cp2"]]
    },
    {
        "id": "cp8",
        "type": "inject",
        "z": "cp1234567.890abc",
        "name": "Example 3",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[200.5, -100.25, 300.75, -90.0]",
        "payloadType": "str",
        "x": 110,
        "y": 260,
        "wires": [["cp2"]]
    },
    {
        "id": "cp9",
        "type": "ui_button",
        "z": "cp1234567.890abc",
        "name": "",
        "group": "cp_group_1",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Move to Parsed Position",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 340,
        "wires": [["cp10"]]
    },
    {
        "id": "cp10",
        "type": "change",
        "z": "cp1234567.890abc",
        "name": "Get Stored Coords",
        "rules": [
            {"t": "set", "p": "payload", "pt": "msg", "to": "coordinates", "tot": "flow"}
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 340,
        "wires": [["cp11"]]
    },
    {
        "id": "cp11",
        "type": "switch",
        "z": "cp1234567.890abc",
        "name": "Check if Valid",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {"t": "nnull"},
            {"t": "else"}
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 340,
        "wires": [["cp12"], ["cp13"]]
    },
    {
        "id": "cp12",
        "type": "dobot-move",
        "z": "cp1234567.890abc",
        "name": "Move to Position",
        "connection": "cp-config",
        "moveType": "MovJ",
        "coordType": "cartesian",
        "x": 750,
        "y": 320,
        "wires": [["cp14"]]
    },
    {
        "id": "cp13",
        "type": "ui_toast",
        "z": "cp1234567.890abc",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "cp14",
        "type": "debug",
        "z": "cp1234567.890abc",
        "name": "Move Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "cp-config",
        "type": "dobot-connection",
        "name": "Dobot Robot",
        "host": "192.168.1.6",
        "dashboardPort": "29999",
        "movePort": "30003",
        "feedbackPort": "30004",
        "autoConnect": true
    },
    {
        "id": "cp_group_1",
        "type": "ui_group",
        "name": "Coordinate Parser",
        "tab": "cp_tab_1",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cp_tab_1",
        "type": "ui_tab",
        "name": "Coordinate Entry",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]