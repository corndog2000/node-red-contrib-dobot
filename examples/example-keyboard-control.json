[
    {
        "id": "kb1234567.890abc",
        "type": "tab",
        "label": "Keyboard Control Example",
        "disabled": false,
        "info": "Example flow showing keyboard control similar to Python UI"
    },
    {
        "id": "kb-config",
        "type": "dobot-connection",
        "name": "Dobot Robot",
        "host": "192.168.1.6",
        "dashboardPort": "29999",
        "movePort": "30003",
        "feedbackPort": "30004",
        "autoConnect": true
    },
    {
        "id": "kb1",
        "type": "comment",
        "z": "kb1234567.890abc",
        "name": "Keyboard Controls",
        "info": "Keyboard shortcuts:\n- Q: X-\n- W: X+\n- A: Y-\n- S: Y+\n- Z: Z-\n- X: Z+\n- E: Log current position",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "kb2",
        "type": "inject",
        "z": "kb1234567.890abc",
        "name": "Enable Robot",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 100,
        "wires": [["kb3"]]
    },
    {
        "id": "kb3",
        "type": "dobot-command",
        "z": "kb1234567.890abc",
        "name": "Enable",
        "connection": "kb-config",
        "commandType": "predefined",
        "command": "EnableRobot",
        "x": 280,
        "y": 100,
        "wires": [["kb4"]]
    },
    {
        "id": "kb4",
        "type": "debug",
        "z": "kb1234567.890abc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 450,
        "y": 100,
        "wires": []
    },
    {
        "id": "kb5",
        "type": "function",
        "z": "kb1234567.890abc",
        "name": "Keyboard Handler",
        "func": "// Handle keyboard events for robot control\n// This simulates the Python UI keyboard functionality\n\nconst key = msg.payload.key;\nconst action = msg.payload.action; // 'press' or 'release'\n\nif (action === 'press') {\n    // Map keys to jog commands\n    const keyMap = {\n        'q': 'X-',\n        'w': 'X+',\n        'a': 'Y-',\n        's': 'Y+',\n        'z': 'Z-',\n        'x': 'Z+'\n    };\n    \n    if (keyMap[key]) {\n        return {\n            payload: {\n                axis: keyMap[key]\n            },\n            moveType: 'MoveJog'\n        };\n    } else if (key === 'e') {\n        // Log position command\n        return {\n            topic: 'log_position',\n            payload: 'status'\n        };\n    }\n} else if (action === 'release') {\n    // Stop jog movement\n    return {\n        payload: {\n            axis: ''\n        },\n        moveType: 'MoveJog'\n    };\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 180,
        "wires": [["kb6", "kb7"]]
    },
    {
        "id": "kb6",
        "type": "switch",
        "z": "kb1234567.890abc",
        "name": "Route by Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {"t": "eq", "v": "log_position", "vt": "str"},
            {"t": "else"}
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 180,
        "wires": [["kb8"], ["kb9"]]
    },
    {
        "id": "kb7",
        "type": "debug",
        "z": "kb1234567.890abc",
        "name": "Key Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 490,
        "y": 240,
        "wires": []
    },
    {
        "id": "kb8",
        "type": "dobot-status",
        "z": "kb1234567.890abc",
        "name": "Get Position",
        "connection": "kb-config",
        "dataType": "position",
        "outputMode": "poll",
        "pollInterval": "1000",
        "autoStart": false,
        "x": 690,
        "y": 160,
        "wires": [["kb10"]]
    },
    {
        "id": "kb9",
        "type": "dobot-move",
        "z": "kb1234567.890abc",
        "name": "Jog Movement",
        "connection": "kb-config",
        "moveType": "MoveJog",
        "coordType": "cartesian",
        "x": 700,
        "y": 200,
        "wires": [["kb11"]]
    },
    {
        "id": "kb10",
        "type": "function",
        "z": "kb1234567.890abc",
        "name": "Format Position Log",
        "func": "// Format position for logging, similar to Python UI\nif (msg.payload && msg.payload.position) {\n    const p = msg.payload.position;\n    const timestamp = new Date().toISOString();\n    \n    // Format like Python: round to 4 decimal places\n    const x = p.x.toFixed(4);\n    const y = p.y.toFixed(4);\n    const z = p.z.toFixed(4);\n    const r = p.rx.toFixed(4);\n    \n    msg.payload = {\n        timestamp: timestamp,\n        position: `(${x}, ${y}, ${z}, ${r})`,\n        x: parseFloat(x),\n        y: parseFloat(y),\n        z: parseFloat(z),\n        r: parseFloat(r)\n    };\n    \n    // Also format for display\n    msg.display = `${timestamp}: Position saved - X:${x} Y:${y} Z:${z} R:${r}`;\n    \n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 160,
        "wires": [["kb12", "kb13"]]
    },
    {
        "id": "kb11",
        "type": "debug",
        "z": "kb1234567.890abc",
        "name": "Jog Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 900,
        "y": 200,
        "wires": []
    },
    {
        "id": "kb12",
        "type": "file",
        "z": "kb1234567.890abc",
        "name": "Log to File",
        "filename": "positions.log",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 1070,
        "y": 140,
        "wires": [[]]
    },
    {
        "id": "kb13",
        "type": "debug",
        "z": "kb1234567.890abc",
        "name": "Position Log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "display",
        "targetType": "msg",
        "x": 1070,
        "y": 180,
        "wires": []
    },
    {
        "id": "kb14",
        "type": "inject",
        "z": "kb1234567.890abc",
        "name": "Simulate Q Key Press",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"key\": \"q\", \"action\": \"press\"}",
        "payloadType": "json",
        "x": 140,
        "y": 280,
        "wires": [["kb5"]]
    },
    {
        "id": "kb15",
        "type": "inject",
        "z": "kb1234567.890abc",
        "name": "Simulate Key Release",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"key\": \"q\", \"action\": \"release\"}",
        "payloadType": "json",
        "x": 140,
        "y": 320,
        "wires": [["kb5"]]
    },
    {
        "id": "kb16",
        "type": "inject",
        "z": "kb1234567.890abc",
        "name": "Simulate E Key (Log)",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"key\": \"e\", \"action\": \"press\"}",
        "payloadType": "json",
        "x": 140,
        "y": 360,
        "wires": [["kb5"]]
    },
    {
        "id": "kb17",
        "type": "comment",
        "z": "kb1234567.890abc",
        "name": "Position Monitoring",
        "info": "Monitor robot position in real-time",
        "x": 110,
        "y": 420,
        "wires": []
    },
    {
        "id": "kb18",
        "type": "inject",
        "z": "kb1234567.890abc",
        "name": "Start Monitor",
        "props": [{"p": "payload"}],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 110,
        "y": 460,
        "wires": [["kb19"]]
    },
    {
        "id": "kb19",
        "type": "dobot-status",
        "z": "kb1234567.890abc",
        "name": "Position Stream",
        "connection": "kb-config",
        "dataType": "position",
        "outputMode": "stream",
        "pollInterval": "1000",
        "autoStart": false,
        "x": 300,
        "y": 460,
        "wires": [["kb20"]]
    },
    {
        "id": "kb20",
        "type": "function",
        "z": "kb1234567.890abc",
        "name": "Format Display",
        "func": "// Format position for display\nif (msg.payload) {\n    const p = msg.payload;\n    msg.payload = `X:${p.x.toFixed(1)} Y:${p.y.toFixed(1)} Z:${p.z.toFixed(1)} R:${p.rx.toFixed(1)}`;\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 460,
        "wires": [["kb21"]]
    },
    {
        "id": "kb21",
        "type": "ui_text",
        "z": "kb1234567.890abc",
        "group": "kb_group_1",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current Position",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 700,
        "y": 460,
        "wires": []
    },
    {
        "id": "kb22",
        "type": "ui_template",
        "z": "kb1234567.890abc",
        "group": "kb_group_1",
        "name": "Keyboard Instructions",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div>\n    <h4>Keyboard Controls</h4>\n    <table>\n        <tr><td><b>Q</b></td><td>X-</td><td style=\"padding-left:20px\"><b>W</b></td><td>X+</td></tr>\n        <tr><td><b>A</b></td><td>Y-</td><td style=\"padding-left:20px\"><b>S</b></td><td>Y+</td></tr>\n        <tr><td><b>Z</b></td><td>Z-</td><td style=\"padding-left:20px\"><b>X</b></td><td>Z+</td></tr>\n        <tr><td><b>E</b></td><td colspan=\"3\">Log Current Position</td></tr>\n    </table>\n    <p><i>Note: In Node-RED, you'll need to simulate key presses using inject nodes or integrate with a keyboard input node.</i></p>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 140,
        "y": 520,
        "wires": [[]]
    },
    {
        "id": "kb_group_1",
        "type": "ui_group",
        "name": "Keyboard Control",
        "tab": "kb_tab_1",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "kb_tab_1",
        "type": "ui_tab",
        "name": "Dobot Keyboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]